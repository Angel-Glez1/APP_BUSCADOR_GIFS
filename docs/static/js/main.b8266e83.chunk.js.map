{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","valueInput","setValueInput","onSubmit","e","preventDefault","trim","length","catg","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","img","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAqCeA,EAlCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBa,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,+BCP9CG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,YAClB,MAAO,CAAEC,GADmE,EAAvDA,GACRC,MAD+D,EAAnDA,MACLT,IADwD,EAA5CU,OAAUC,iBAAoBX,QAN/C,kBAUZM,GAVY,4CAAH,sDCiBLM,EATK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IACzB,OACI,sBAAKa,UAAU,aAAf,UACI,qBAAKA,UAAU,MAAMC,IAAKd,EAAKe,IAAKN,IACpC,4BAAIA,QCgBDO,EArBC,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAEf,ECDwB,SAACA,GAGzB,MAA0Bd,mBAAS,CAAEqB,KAAM,GAAIY,SAAS,IAAxD,mBAAOC,EAAP,KAAcC,EAAd,KASA,OANAC,qBAAU,WACNvB,EAAQC,GACHuB,MAAK,SAAAC,GAAG,OAAIH,EAAS,CAAEd,KAAMiB,EAAKL,SAAS,SACjD,CAACnB,IAGGoB,EDXmBK,CAAazB,GAA/BO,EAAR,EAAQA,KAAMY,EAAd,EAAcA,QAEd,OACI,qCACI,oBAAIJ,UAAU,aAAd,SAA6Bf,IAE3BmB,GAAW,6CAEb,qBAAKJ,UAAU,OAAf,SAEQR,EAAKE,KAAI,SAAAe,GAAG,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAId,aEa/BgB,EAxBM,WAEjB,MAAoCxC,mBAAS,CAAC,UAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAEA,OACI,qCACI,oBAAI8B,UAAU,aAAd,0BACA,cAAC,EAAD,CAAa9B,cAAeA,IAE5B,uBACA,6BAEQ0C,EAAWlB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCpBjC4B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.b8266e83.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [valueInput, setValueInput] = useState('');\r\n\r\n\r\n    // Setea el valor de mi useState\r\n    const handleInputChage = (e) => setValueInput(e.target.value);\r\n\r\n    \r\n    // Actualiza el estado de la categorias (compenent Padre) con el value del input.\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (valueInput.trim().length > 2) {\r\n            setCategories(catg => [valueInput, ...catg]);\r\n            setValueInput('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} >\r\n            <input\r\n                type='text'\r\n                value={valueInput}\r\n                onChange={handleInputChage} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n","\r\n\r\nexport const getGift = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Ip1Tku6JNPwghTsP6YBtxBlemJ1S9JCQ`;\r\n\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(({ id, title, images: { downsized_medium: { url } } }) => {\r\n        return { id, title, url }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\n\r\n/**\r\n * Crea el HTML para mostar los gifs que se encontraron con la busqueda.\r\n * @param {String} param0 Primer param ID de los gifs\r\n * @param {String} param1 Segundo param TITLE de los gifs\r\n * @param {String} param2 Tercer param Url de los gifs\r\n * @returns Retorna el HTML para mostrar los gifs\r\n */\r\nconst GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className='card-items'>\r\n            <img className='img' src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\n/**\r\n * \r\n * @param {String} param0 Category a buscar\r\n * @returns Retorna todos los gifs que coincidieran con la busqueda\r\n */\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className='txt-center' >{category}</h3>\r\n            \r\n            { loading && <p> Loading... </p>}\r\n            \r\n            <div className='card'>\r\n                {\r\n                    data.map(img => (\r\n                        <GifGridItem key={img.id} {...img} />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGift } from \"../helpers/getGifs\";\r\n\r\n\r\n/**\r\n * Este Custom Hook es el que se encarga de hacer la busqueda de los gif a la API\r\n * \r\n * @param {String} category Es la categoria que el usuario esta buscando\r\n * @returns {Object} Retorna un objeto con los gifs encontrados y el loading\r\n */\r\nexport const useFetchGifs = (category) => {\r\n\r\n    // Estado de mi custom hooks\r\n    const [state, setstate] = useState({ data: [], loading: true });\r\n\r\n    // Efecto para que solo haga la peticion a API\r\n    useEffect(() => {\r\n        getGift(category)\r\n            .then(img => setstate({ data: img, loading: false }))\r\n    }, [category]);\r\n\r\n    // Retornamos el objeto\r\n    return state; \r\n}\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n/**\r\n * Este funcional component se encarga de cargar dos \r\n * componentes principales \r\n * 1)-El input para buscar los gifs\r\n * 2)-La gird donde se iterar los resaltados de la busqueda\r\n *  \r\n */\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Gatos']);\r\n\r\n    return (\r\n        <>\r\n            <h2 className='txt-center'>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n"],"sourceRoot":""}